{"version":3,"sources":["API/axios.js","components/MovieModal/index.js","components/Row.js","API/requests.js","components/Banner.js","components/Nav.js","components/App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","MovieModal","backdrop_path","title","overview","name","release_date","first_air_date","vote_average","setModalVisibility","useState","trailerUrl","setTrailerUrl","useEffect","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","get","catch","error","console","log","className","role","onClick","videoId","opts","height","width","playerVars","autoplay","src","Math","floor","random","Row","fetchUrl","isLargeRow","id","movies","setMovies","modalVisibility","movieSelected","setMovieSelection","a","request","data","results","fetchData","class","document","getElementById","scrollLeft","window","innerWidth","map","movie","key","handleClick","poster_path","loading","alt","API_KEY","requests","fetchNetflixOriginals","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","length","style","backgroundImage","backgroundPosition","backgroundSize","original_name","fontSize","paddingRight","marginRight","substr","Nav","show","handleShow","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3e77dbea.chunk.js","sourcesContent":["import axios from \"axios\";\n\n//THIS IS THE BASE OF THE URL\nconst instance = axios.create({\n    baseURL : \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;","import React,{useEffect, useState} from 'react';\nimport './MovieModal.css';\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport CancelIcon from '@material-ui/icons/Cancel';\n\nconst MovieModal = ({backdrop_path,title,overview,name,release_date,first_air_date,vote_average,setModalVisibility}) => {\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n    const [trailerUrl ,setTrailerUrl] = useState(\"\") \n    const opts = {\n        height : \"390\",\n        width : \"100%\",\n        playerVars : {\n            autoplay : 1,\n        },\n    }\n    const randomPorcentaje = ()=>{\n        return Math.floor(Math.random() * 100);\n    }\n    useEffect(() => {\n        if(trailerUrl){\n            setTrailerUrl('')\n        }else{\n            movieTrailer(title || name || \"\")\n            .then(url =>{\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n            }).catch(error => console.log(error))\n        }\n    }, [])\n    \n    return (\n        <div className=\"presentation\" role=\"presentation\">\n            <div className=\"wrapper-modal\">\n                <div className=\"modal\">\n                    <span onClick={()=>setModalVisibility(false)}className=\"modal-close\"><CancelIcon/></span>\n                    {trailerUrl ? <Youtube videoId={trailerUrl} opts={opts}/> :                     \n                        (<img\n                        className=\"modal__poster-img\"\n                        src={`${base_url}${backdrop_path}`}\n                    />)}\n\n                    <div className=\"modal__content\">\n                        <p className=\"modal__details\"><span className=\"modal__user-perc\">{randomPorcentaje()}% for you</span> {release_date ? release_date : first_air_date}</p>\n                        <h2 className=\"modal__title\">{title ? title : name}</h2>\n                        <p className=\"modal__overview\">{overview}</p>\n                        <p className=\"modal__overview\">Vote Average: {vote_average}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieModal\n","import React, {useState,useEffect} from 'react'\nimport axios from \"../API/axios\";\nimport \"./Row.css\";\nimport MovieModal from './MovieModal';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nconst Row= ({title,fetchUrl,isLargeRow,id})=> {\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n    const [movies, setMovies] = useState([])\n    const [modalVisibility,setModalVisibility] = useState(false);\n    const [movieSelected, setMovieSelection] = useState({});\n\n    //A snippet of code which runs based on a specific condition/variable\n    useEffect(()=>{\n\n        //if [], run once when the row loads, and dont run again \n\n        async function fetchData(){\n            //Dont move until we get the API answer\n            const request = await axios.get(fetchUrl);\n            // GET REQUEST  = \"https://api.themoviedb.org/3/fetchUrl\"\n            setMovies(request.data.results)\n            return request;\n        }\n\n        fetchData();\n\n    }, [fetchUrl]);\n\n    const handleClick = (movie) =>{\n        setModalVisibility(true);\n        setMovieSelection(movie);\n\n    }\n    return (\n        <section className=\"row\">\n            {/** TITLE */}\n            <h2>{title}</h2>\n            <div class=\"slider\">\n     \n                <div className=\"slider__arrow-left\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft-=(window.innerWidth-80)}}><ArrowBackIosIcon/></span></div>\n                <div id={id} className=\"row__posters\">\n                    {/**SEVERAL ROW__POSTER */}\n                    {movies.map(movie=>(\n                        <img\n                            key={movie.id}\n                            onClick={() => handleClick(movie)}\n                            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} \n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                            loading=\"lazy\"\n                            alt={movie.name}/>\n                    ))}\n                    \n                </div>\n                <div className=\"slider__arrow-right\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft+=(window.innerWidth-80)}}><ArrowForwardIosIcon/></span></div>\n            </div>\n            {modalVisibility && <MovieModal {...movieSelected} setModalVisibility={setModalVisibility}/>}\n        </section>\n    )\n}\n\nexport default Row\n","const API_KEY = \"896c8566fc255f7c52f6ea6bd2901188\";\n\nconst requests = {\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React,{useState,useEffect} from 'react';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport axios from \"../API/axios\";\nimport requests from \"../API/requests\";\nimport \"./Banner.css\";\n\nconst Banner= ()=> {\n    const [movie,setMovie] = useState([]);\n\n    const truncate = (str, n)=> {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetflixOriginals)\n            //Give to our movie hook one of all the movies randomly\n            setMovie(request.data.results[\n                Math.floor(Math.random() * request.data.results.length -1)\n            ]);\n            return request;\n        }\n        fetchData();\n        \n    },[]);\n    \n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundImage : `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                    )`,\n                backgroundPosition : \"top center\",\n                backgroundSize: \"cover\",\n            }}\n        >\n            <div className=\"banner__contents\">\n                {/**Tittle */}\n                <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button play\"><PlayArrowIcon />Play</button>\n                    <button className=\"banner__button info\"><InfoOutlinedIcon fontSize=\"small\"  paddingRight={20} marginRight={100}/><div className=\"space\"></div> More Information</button>\n                    \n                </div>\n                {/**DIV > 2 BUTTONS */}\n\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\n                {/*Description*/}\n            </div>   \n            <div className=\"banner--fadeBottom\"/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React,{useState,useEffect} from 'react';\nimport \"./Nav.css\";\n\nconst Nav= ()=> {\n    const [show, handleShow] = useState(false);\n\n    useEffect(()=>{\n        window.addEventListener(\"scroll\", () =>{\n            if(window.scrollY > 50){\n                handleShow(true);\n            }else{\n                handleShow(false);\n            }\n            \n        });\n        return () => {\n            window.removeEventListener(\"scroll\",()=>{})\n        }\n    }, [])\n    \n    return (\n        <nav className={`nav ${show && \"nav__black\"}`}>\n            <img\n                alt=\"Netflix logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/170px-Netflix_2015_logo.svg.png\"\n                className=\"nav__logo\"\n            />\n            <img\n                alt=\"User logged\"\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                className=\"nav__avatar\"\n            />\n        </nav>\n    )\n}\n\nexport default Nav\n","import React from 'react';\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nimport requests from \"../API/requests\";\nimport './App.css';\n\nconst  App=()=> {\n  return (\n    <div className=\"app\">\n      {/**NAV */}\n      <Nav/>\n      {/*BANNER*/}\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        id=\"NO\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n\n      <Row\n        title=\"Trending Now\"\n        id=\"TN\"\n        fetchUrl={requests.fetchTrending}\n      />\n      <Row\n        title=\"Top Rated\"\n        id=\"TR\"\n        fetchUrl={requests.fetchTopRated}\n      />\n      <Row\n        title=\"Action Movies\"\n        id=\"AM\"\n        fetchUrl={requests.fetchActionMovies}\n      />\n      <Row\n        title=\"Comedy Movies\"\n        id=\"CM\"\n        fetchUrl={requests.fetchComedyMovies}\n      />\n      <Row\n        title=\"Horror Movies\"\n        id=\"HM\"\n        fetchUrl={requests.fetchHorrorMovies}\n      />\n      <Row\n        title=\"Romance  Movies\"\n        id=\"RM\"\n        fetchUrl={requests.fetchRomanceMovies}\n      />\n      <Row\n        title=\"Documentaries\"\n        id=\"DM\"\n        fetchUrl={requests.fetchDocumentaries}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}